{"version":3,"sources":["roots/RandomPicker.tsx","roots/Root.tsx","gamepad/inputNormalizer.ts","pushman/player.ts","roots/PushMan.tsx","pageConfig.ts","roots/Hoge.tsx","hooks/useTick.ts","gamepad/gamepadProvider.tsx","component/SideNav.tsx","grid/GridBox.tsx","lib/flatRouter.tsx","component/App.tsx","serviceWorker.ts","index.tsx"],"names":["Secret","_ref","secretValue","_useState","useState","_useState2","Object","slicedToArray","revealed","setRevealed","react_default","a","createElement","onClick","generate","Math","floor","random","norm","_ref2","x","y","sqrt","zero","cap","v","upperBound","_ref3","n","_ref4","multi","stick","threshold","initialPlayer","pos","isGround","player","normalize1","abs","min","max","updatePlayer","gamepad","_getNextPlayer","arr","b","getNextPlayer","axes","getAxes","buttons","_gamepad$buttons$map","map","button","value","_gamepad$buttons$map2","A","B","X","Y","LB","RB","LT","RT","View","Menu","LStick","RStick","Up","Down","Left","Right","Guide","getButtons","xInput","Block","core_browser_esm","css","_templateObject","reducer","state","action","type","player1","PlayerBlock","_ref2$player$pos","PushMan_Block","pageConfig","component","path","name","callback","_useReducer","useReducer","_useReducer2","dispatch","toConsumableArray","navigator","getGamepads","find","inputAction","useEffect","isAlive","window","requestAnimationFrame","tick","time","_templateObject2","PushMan_PlayerBlock","_useState3","_useState4","randomNumber","setRandomNumber","RandomPicker_Secret","key","SideNavContainer","styled","div","withConfig","displayName","componentId","ExternalLink","ReactRouterLink","NavLink","SideNav","page","navigation","to","href","FlexBoxContainer","GridBox_templateObject","Child","props","concat","base","Row","children","className","React","Children","child","isValidElement","Box","GridBox_Box","_ref2$base","FlatRouter","pages","Fragment","isRoot","react_router","exact","App","react_router_dom","GridBox_Row","component_SideNav","flatRouter_FlatRouter","Boolean","location","hostname","match","ReactDOM","render","component_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fcd47b52.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Page } from \"../lib/Page\";\r\ntype Props = {\r\n  secretValue: number;\r\n};\r\nconst Secret = ({ secretValue }: Props) => {\r\n  const [revealed, setRevealed] = useState(false);\r\n  return (\r\n    <div>\r\n      <button onClick={() => setRevealed(true)}>Reveal</button>{\" \"}\r\n      {revealed ? secretValue : \"*\"}\r\n    </div>\r\n  );\r\n};\r\nfunction generate() {\r\n  return Math.floor(Math.random() * 10000);\r\n}\r\nexport function RandomPicker() {\r\n  const [randomNumber, setRandomNumber] = useState(generate());\r\n  return (\r\n    <div>\r\n      <button onClick={() => setRandomNumber(generate())}>\r\n        Generate random number\r\n      </button>{\" \"}\r\n      <Secret secretValue={randomNumber} key={randomNumber} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nexport const Root = () => {\r\n  return <div>This is the root page!!!</div>;\r\n};\r\n","export type Vector = [number, number];\r\nexport const norm = ([x, y]: Vector) => {\r\n  return Math.sqrt(x * x + y * y);\r\n};\r\nexport const zero: Vector = [0, 0];\r\nexport const multi = ([x, y]: Vector, n: number): Vector => {\r\n  return [x * n, y * n];\r\n};\r\nexport const div = ([x, y]: Vector, n: number): Vector => {\r\n  return [x / n, y / n];\r\n};\r\nexport const add = (a: Vector, b: Vector): Vector => {\r\n  return [a[0] + b[0], a[1] + b[1]];\r\n};\r\n// v/norm(v)\r\nexport const normalize = (v: Vector): Vector => {\r\n  return div(v, norm(v));\r\n};\r\n//\r\nexport const cap = (v: Vector, upperBound: number): Vector => {\r\n  if (norm(v) > upperBound) return multi(v, upperBound / norm(v));\r\n  else return v;\r\n};\r\nexport const stick = (v: Vector, threshold: number): Vector => {\r\n  if (norm(v) < threshold) return zero;\r\n  else return v;\r\n};\r\nexport const getAxes = (gamepad: Gamepad): [Vector, Vector] => {\r\n  const axes = gamepad.axes;\r\n  return [\r\n    stick(cap([axes[0], -axes[1]], 1), 0.17),\r\n    stick(cap([axes[2], -axes[3]], 1), 0.17)\r\n  ];\r\n};\r\ntype Buttons = {\r\n  A: number;\r\n  B: number;\r\n  X: number;\r\n  Y: number;\r\n  LB: number;\r\n  RB: number;\r\n  LT: number;\r\n  RT: number;\r\n  View: number;\r\n  Menu: number;\r\n  LStick: number;\r\n  RStick: number;\r\n  Up: number;\r\n  Down: number;\r\n  Left: number;\r\n  Right: number;\r\n  Guide: number; // Not working\r\n};\r\nexport const getButtons = (gamepad: Gamepad): Buttons => {\r\n  const [\r\n    A,\r\n    B,\r\n    X,\r\n    Y,\r\n    LB,\r\n    RB,\r\n    LT,\r\n    RT,\r\n    View,\r\n    Menu,\r\n    LStick,\r\n    RStick,\r\n    Up,\r\n    Down,\r\n    Left,\r\n    Right,\r\n    Guide\r\n  ] = gamepad.buttons.map(button => button.value);\r\n  return {\r\n    A,\r\n    B,\r\n    X,\r\n    Y,\r\n    LB,\r\n    RB,\r\n    LT,\r\n    RT,\r\n    View,\r\n    Menu,\r\n    LStick,\r\n    RStick,\r\n    Up,\r\n    Down,\r\n    Left,\r\n    Right,\r\n    Guide\r\n  };\r\n};\r\n","import { inputAction } from \"../roots/PushMan\";\r\nimport { add, getAxes, getButtons } from \"../gamepad/inputNormalizer\";\r\ntype Vector = [number, number];\r\nconst V = (x: number, y: number): Vector => {\r\n  return [x, y];\r\n};\r\nexport type Player = { pos: Vector; v: Vector };\r\nexport const initialPlayer: Player = { pos: [1, 2], v: [0, 0] };\r\ntype InputAction = ReturnType<typeof inputAction>;\r\nconst isGround = (player: Player) => {\r\n  return player.pos[1] <= 0;\r\n};\r\nconst isNearGround = (player: Player) => {\r\n  return player.pos[1] < 2;\r\n};\r\nconst clone = <X, Y>(arr: [X, Y]): [X, Y] => {\r\n  return [arr[0], arr[1]];\r\n};\r\nconst getNextPlayer = ({ pos, v }: Player): Player => {\r\n  return { pos: add(pos, v), v: clone(v) };\r\n};\r\nconst scale = 1;\r\nconst maxSpeed = 2;\r\nconst acc = 0.15 * scale;\r\nconst airAcc = 0.05 * scale;\r\nconst friction = 0.1 * scale;\r\nconst airFriction = 0.05 * scale;\r\nconst jumpSpeed = 2;\r\nconst normalize1 = (v: number) => {\r\n  if (v > 0) return 1;\r\n  else if (v < 0) return -1;\r\n  else return 0;\r\n};\r\nconst abs = Math.abs;\r\nconst max = Math.max;\r\nconst min = Math.min;\r\nexport const updatePlayer = (player: Player, { gamepad }: InputAction) => {\r\n  const { pos, v } = getNextPlayer(player);\r\n  const axes = getAxes(gamepad);\r\n  const buttons = getButtons(gamepad);\r\n  const xInput = axes[0][0];\r\n  let a = 0;\r\n  if (isGround(player)) {\r\n    if (abs(xInput) > 0 && v[0] * xInput >= 0) {\r\n      a = xInput * acc;\r\n      if (abs(a + v[0]) > maxSpeed) {\r\n        a = (maxSpeed - abs(v[0])) * normalize1(v[0]);\r\n      }\r\n    } else {\r\n      a = -normalize1(v[0]) * min(abs(v[0]), friction);\r\n    }\r\n  } else {\r\n    if (abs(xInput) > 0 && v[0] * xInput >= 0) {\r\n      a = xInput * airAcc;\r\n      if (abs(a + v[0]) > maxSpeed) {\r\n        a = (maxSpeed - abs(v[0])) * normalize1(v[0]);\r\n      }\r\n    } else {\r\n      a = -normalize1(v[0]) * min(abs(v[0]), airFriction);\r\n    }\r\n  }\r\n  // console.log(a);\r\n  v[0] += a;\r\n  if (pos[1] <= 0) {\r\n    pos[1] = 0;\r\n    v[1] = 0;\r\n  }\r\n  if (isGround(player)) {\r\n    if (buttons.A === 1) {\r\n      v[1] = jumpSpeed;\r\n    } else {\r\n      v[1] = 0;\r\n    }\r\n  } else {\r\n    v[1] -= 0.09;\r\n  }\r\n\r\n  return { pos, v };\r\n};\r\n","import * as React from \"react\";\r\n/** @jsx jsx */\r\nimport { css, jsx } from \"@emotion/core\";\r\nimport { getGamepad } from \"../gamepad/gamepadProvider\";\r\nimport { useReducer } from \"react\";\r\nimport { useTick } from \"../hooks/useTick\";\r\nimport { Player, updatePlayer, initialPlayer } from \"../pushman/player\";\r\nconst Block: React.FC<{ x: number; y: number }> = ({ x, y }) => {\r\n  return (\r\n    <div\r\n      css={css`\r\n        box-sizing: border-box;\r\n        height: 15px;\r\n        width: 15px;\r\n        position: absolute;\r\n        border: 3px solid black;\r\n        bottom: ${y}px;\r\n        left: ${x}px;\r\n      `}\r\n    />\r\n  );\r\n};\r\n\r\ntype State = {\r\n  player1: Player;\r\n};\r\nexport function inputAction(gamepad: Gamepad) {\r\n  return { type: \"InputAction\", gamepad } as const;\r\n}\r\ntype Action = ReturnType<typeof inputAction>;\r\nconst reducer = (state: State, action: Action): State => {\r\n  switch (action.type) {\r\n    case \"InputAction\": {\r\n      return { player1: updatePlayer(state.player1, action) };\r\n    }\r\n  }\r\n  return state;\r\n};\r\nconst PlayerBlock: React.FC<{ player: Player }> = ({\r\n  player: {\r\n    pos: [x, y]\r\n  }\r\n}) => {\r\n  return <Block x={x} y={y} />;\r\n};\r\nexport const PushMan: React.FC = () => {\r\n  const [state, dispatch] = useReducer(reducer, { player1: initialPlayer });\r\n  useTick(() => {\r\n    const gamepad = getGamepad();\r\n    if (gamepad) {\r\n      dispatch(inputAction(gamepad));\r\n    }\r\n  });\r\n  return (\r\n    <div>\r\n      <p>\r\n        ゲームパッドをつないでみてね。\r\n        <br />\r\n        Aボタンはジャンプ、スティックで移動するよ。\r\n      </p>\r\n\r\n      <div\r\n        css={css`\r\n          height: 300px;\r\n          width: 300px;\r\n          position: relative;\r\n          border: 3px solid #73ad21;\r\n        `}\r\n      >\r\n        <PlayerBlock player={state.player1} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { Page } from \"./lib/Page\";\r\nimport { Hoge } from \"./roots/Hoge\";\r\nimport { RandomPicker } from \"./roots/RandomPicker\";\r\nimport { Root } from \"./roots/Root\";\r\nimport { PushMan } from \"./roots/PushMan\";\r\n\r\nexport const pageConfig: Page[] = [\r\n  {\r\n    component: Root,\r\n    path: \"/\",\r\n    name: \"React drill\"\r\n  },\r\n  {\r\n    component: Hoge,\r\n    path: \"/hoge/\",\r\n    name: \"Hoge\"\r\n  },\r\n  {\r\n    component: PushMan,\r\n    path: \"/gamepad/\",\r\n    name: \"Jump man\"\r\n  },\r\n  {\r\n    component: RandomPicker,\r\n    path: \"/randompicker/\",\r\n    name: \"Random Picker\"\r\n  }\r\n];\r\n","import React from \"react\";\r\nexport const Hoge = () => <div>Hoge</div>;\r\n","import { useEffect } from \"react\";\r\n\r\nexport function useTick(callback: (time: number) => void) {\r\n  useEffect(() => {\r\n    let isAlive: boolean = true;\r\n    function tick(time: number) {\r\n      if (isAlive) {\r\n        callback(time);\r\n        window.requestAnimationFrame(tick);\r\n      }\r\n    }\r\n    window.requestAnimationFrame(tick);\r\n    return () => {\r\n      isAlive = false;\r\n    };\r\n  });\r\n}\r\n","export const getGamepad = (): Gamepad | null => {\r\n  const gamepads = [...navigator.getGamepads()];\r\n  const oneGamepad = gamepads.find(\r\n    (gamepad): gamepad is Gamepad => gamepad !== null\r\n  );\r\n  return oneGamepad || null;\r\n};","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"styled-components/macro\";\r\nimport styled from \"styled-components/macro\";\r\nimport { pageConfig } from \"../pageConfig\";\r\nconst SideNavContainer = styled.div`\r\n  background: darkred;\r\n  height: 100vh;\r\n`;\r\nconst ExternalLink = styled.a`\r\n  padding: 0 10px;\r\n  color: white;\r\n  :hover {\r\n    text-decoration: underline dashed;\r\n  }\r\n`;\r\nconst ReactRouterLink = styled(NavLink)`\r\n  padding: 0 10px;\r\n  color: white;\r\n  text-decoration: none;\r\n  :hover {\r\n    text-decoration: underline;\r\n  }\r\n`;\r\nconst SideNav: React.FC = () => {\r\n  return (\r\n    <SideNavContainer>\r\n      {pageConfig.map(\r\n        page =>\r\n          page.navigation!==\"invisible\" && (\r\n            <div key={page.name}>\r\n              <ReactRouterLink to={page.path}>{page.name}</ReactRouterLink>\r\n            </div>\r\n          )\r\n      )}\r\n      <br />\r\n      <div>\r\n        <ExternalLink href=\"https://github.com/nikeeshi/react-drill\">\r\n          Github\r\n        </ExternalLink>\r\n      </div>\r\n      <div>\r\n        <ExternalLink href=\"http://nikeeshipro.hatenablog.com/\">\r\n          My blog\r\n        </ExternalLink>\r\n      </div>\r\n    </SideNavContainer>\r\n  );\r\n};\r\n\r\nexport default SideNav;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst FlexBoxContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n`;\r\ninterface ChildProps {\r\n  base: number;\r\n}\r\nconst Child = styled.div((props: ChildProps) => `flex:${props.base}`);\r\ninterface ContainerProps {\r\n  className?: string;\r\n}\r\nexport const Row: React.FunctionComponent<ContainerProps> = ({\r\n  children,\r\n  className\r\n}) => {\r\n  return (\r\n    <FlexBoxContainer className={className}>\r\n      {React.Children.map(children, child => {\r\n        if (React.isValidElement(child) && child.type === Box) {\r\n          return child;\r\n        } else {\r\n          return <Box>{child}</Box>;\r\n        }\r\n      })}\r\n    </FlexBoxContainer>\r\n  );\r\n};\r\ninterface BoxProps {\r\n  base?: number;\r\n}\r\nexport const Box: React.FunctionComponent<BoxProps> = ({\r\n  children,\r\n  base = 1\r\n}) => {\r\n  return <Child base={base}>{children}</Child>;\r\n};\r\n","import React from \"react\";\r\nimport { Page } from \"./Page\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\nexport const FlatRouter: React.FC<{ pages: Page[] }> = ({ pages }) => {\r\n  return (\r\n    <>\r\n      {pages.map(page => {\r\n        const isRoot = page.path === \"/\";\r\n        return (\r\n          <Route\r\n            key={page.name}\r\n            path={page.path}\r\n            exact={isRoot}\r\n            component={page.component}\r\n          />\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { HashRouter as Router } from \"react-router-dom\";\nimport SideNav from \"./SideNav\";\nimport { Row, Box } from \"../grid/GridBox\";\nimport { FlatRouter } from \"../lib/flatRouter\";\nimport { pageConfig } from \"../pageConfig\";\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <Row>\n        <SideNav />\n        <Box base={3}>\n          <FlatRouter pages={pageConfig} />\n        </Box>\n      </Row>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}