{"version":3,"sources":["roots/RandomPicker.tsx","roots/Root.tsx","gamepad/gamepad.tsx","roots/PushMan.tsx","pageConfig.ts","roots/Hoge.tsx","component/SideNav.tsx","grid/GridBox.tsx","lib/flatRouter.tsx","component/App.tsx","serviceWorker.ts","index.tsx"],"names":["Secret","_ref","secretValue","_useState","useState","_useState2","Object","slicedToArray","revealed","setRevealed","react_default","a","createElement","onClick","generate","Math","floor","random","GamepadProvider","children","gamepad","setGamepad","useEffect","setInterval","toConsumableArray","navigator","getGamepads","find","Fragment","Block","x","y","core_browser_esm","css","_templateObject","pageConfig","component","path","name","_templateObject2","gamepad_GamepadProvider","PushMan_Block","axes","_useState3","_useState4","randomNumber","setRandomNumber","RandomPicker_Secret","key","SideNavContainer","styled","div","withConfig","displayName","componentId","ExternalLink","ReactRouterLink","NavLink","SideNav","map","page","navigation","to","href","FlexBoxContainer","GridBox_templateObject","Child","props","concat","base","Row","className","React","Children","child","isValidElement","type","Box","GridBox_Box","_ref2","_ref2$base","FlatRouter","pages","isRoot","react_router","exact","App","react_router_dom","GridBox_Row","component_SideNav","flatRouter_FlatRouter","Boolean","window","location","hostname","match","ReactDOM","render","component_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a6433065.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Page } from \"../lib/Page\";\r\ntype Props = {\r\n  secretValue: number;\r\n};\r\nconst Secret = ({ secretValue }: Props) => {\r\n  const [revealed, setRevealed] = useState(false);\r\n  return (\r\n    <div>\r\n      <button onClick={() => setRevealed(true)}>Reveal</button>{\" \"}\r\n      {revealed ? secretValue : \"*\"}\r\n    </div>\r\n  );\r\n};\r\nfunction generate() {\r\n  return Math.floor(Math.random() * 10000);\r\n}\r\nexport function RandomPicker() {\r\n  const [randomNumber, setRandomNumber] = useState(generate());\r\n  return (\r\n    <div>\r\n      <button onClick={() => setRandomNumber(generate())}>\r\n        Generate random number\r\n      </button>{\" \"}\r\n      <Secret secretValue={randomNumber} key={randomNumber} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nexport const Root = () => {\r\n  return <div>This is the root page!!!</div>;\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { ReactNode } from \"react\";\r\nconst getGamepad = (): Gamepad | null => {\r\n  const gamepads = [...navigator.getGamepads()];\r\n  const oneGamepad = gamepads.find(\r\n    (gamepad): gamepad is Gamepad => gamepad !== null\r\n  );\r\n  return oneGamepad || null;\r\n};\r\nexport const GamepadProvider: React.FC<{\r\n  children: (gamepad: Gamepad | null) => ReactNode;\r\n}> = ({ children }) => {\r\n  const [gamepad, setGamepad] = useState<Gamepad | null>(null);\r\n  useEffect(() => {\r\n    setInterval(() => setGamepad(getGamepad()));\r\n  }, []);\r\n  return <>{children(gamepad)}</>;\r\n};\r\n","import * as React from \"react\";\r\n/** @jsx jsx */\r\nimport { css, jsx } from \"@emotion/core\";\r\nimport { GamepadProvider } from \"../gamepad/gamepad\";\r\nconst Block: React.FC<{ x: number; y: number }> = ({ x, y }) => {\r\n  return (\r\n    <div\r\n      css={css`\r\n        box-sizing: border-box;\r\n        height: 15px;\r\n        width: 15px;\r\n        position: absolute;\r\n        border: 3px solid black;\r\n        top: ${y}px;\r\n        left: ${x}px;\r\n      `}\r\n    />\r\n  );\r\n};\r\n\r\nexport const PushMan: React.FC = () => {\r\n  return (\r\n    <div\r\n      css={css`\r\n        box-sizing: border-box;\r\n        height: 300px;\r\n        width: 300px;\r\n        position: relative;\r\n        border: 3px solid #73ad21;\r\n      `}\r\n    >\r\n      <GamepadProvider>\r\n        {(gamepad: Gamepad | null) => (\r\n          <div>\r\n            {gamepad && <Block x={(1+gamepad.axes[0])/2*279} y={(1+gamepad.axes[1])/2*279} />}\r\n            {gamepad && <Block x={(1+gamepad.axes[2])/2*279} y={(1+gamepad.axes[3])/2*279} />}\r\n          </div>\r\n        )}\r\n      </GamepadProvider>\r\n    </div>\r\n  );\r\n};\r\n","import { Page } from \"./lib/Page\";\r\nimport { Hoge } from \"./roots/Hoge\";\r\nimport { RandomPicker } from \"./roots/RandomPicker\";\r\nimport { Root } from \"./roots/Root\";\r\nimport { PushMan } from \"./roots/PushMan\";\r\n\r\nexport const pageConfig: Page[] = [\r\n  {\r\n    component: Root,\r\n    path: \"/\",\r\n    name: \"React drill\"\r\n  },\r\n  {\r\n    component: Hoge,\r\n    path: \"/hoge/\",\r\n    name: \"Hoge\"\r\n  },\r\n  {\r\n    component: PushMan,\r\n    path: \"/gamepad/\",\r\n    name: \"Gamepad detector\"\r\n  },\r\n  {\r\n    component: RandomPicker,\r\n    path: \"/randompicker/\",\r\n    name: \"Random Picker\"\r\n  }\r\n];\r\n","import React from \"react\";\r\nexport const Hoge = () => <div>Hoge</div>;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"styled-components/macro\";\r\nimport styled from \"styled-components/macro\";\r\nimport { pageConfig } from \"../pageConfig\";\r\nconst SideNavContainer = styled.div`\r\n  background: darkblue;\r\n  height: 100vh;\r\n`;\r\nconst ExternalLink = styled.a`\r\n  padding: 0 10px;\r\n  color: white;\r\n  :hover {\r\n    text-decoration: underline dashed;\r\n  }\r\n`;\r\nconst ReactRouterLink = styled(NavLink)`\r\n  padding: 0 10px;\r\n  color: white;\r\n  text-decoration: none;\r\n  :hover {\r\n    text-decoration: underline;\r\n  }\r\n`;\r\nconst SideNav: React.FC = () => {\r\n  return (\r\n    <SideNavContainer>\r\n      {pageConfig.map(\r\n        page =>\r\n          page.navigation!==\"invisible\" && (\r\n            <div key={page.name}>\r\n              <ReactRouterLink to={page.path}>{page.name}</ReactRouterLink>\r\n            </div>\r\n          )\r\n      )}\r\n      <br />\r\n      <div>\r\n        <ExternalLink href=\"https://github.com/nikeeshi/react-drill\">\r\n          Github\r\n        </ExternalLink>\r\n      </div>\r\n      <div>\r\n        <ExternalLink href=\"http://nikeeshipro.hatenablog.com/\">\r\n          My blog\r\n        </ExternalLink>\r\n      </div>\r\n    </SideNavContainer>\r\n  );\r\n};\r\n\r\nexport default SideNav;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst FlexBoxContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n`;\r\ninterface ChildProps {\r\n  base: number;\r\n}\r\nconst Child = styled.div((props: ChildProps) => `flex:${props.base}`);\r\ninterface ContainerProps {\r\n  className?: string;\r\n}\r\nexport const Row: React.FunctionComponent<ContainerProps> = ({\r\n  children,\r\n  className\r\n}) => {\r\n  return (\r\n    <FlexBoxContainer className={className}>\r\n      {React.Children.map(children, child => {\r\n        if (React.isValidElement(child) && child.type === Box) {\r\n          return child;\r\n        } else {\r\n          return <Box>{child}</Box>;\r\n        }\r\n      })}\r\n    </FlexBoxContainer>\r\n  );\r\n};\r\ninterface BoxProps {\r\n  base?: number;\r\n}\r\nexport const Box: React.FunctionComponent<BoxProps> = ({\r\n  children,\r\n  base = 1\r\n}) => {\r\n  return <Child base={base}>{children}</Child>;\r\n};\r\n","import React from \"react\";\r\nimport { Page } from \"./Page\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\nexport const FlatRouter: React.FC<{ pages: Page[] }> = ({ pages }) => {\r\n  return (\r\n    <>\r\n      {pages.map(page => {\r\n        const isRoot = page.path === \"/\";\r\n        return (\r\n          <Route\r\n            key={page.name}\r\n            path={page.path}\r\n            exact={isRoot}\r\n            component={page.component}\r\n          />\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { HashRouter as Router } from \"react-router-dom\";\nimport SideNav from \"./SideNav\";\nimport { Row, Box } from \"../grid/GridBox\";\nimport { FlatRouter } from \"../lib/flatRouter\";\nimport { pageConfig } from \"../pageConfig\";\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <Row>\n        <SideNav />\n        <Box base={3}>\n          <FlatRouter pages={pageConfig} />\n        </Box>\n      </Row>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}