{"version":3,"sources":["component/Box.tsx","component/Styled.tsx","component/NavigationBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["rand256","Math","floor","random","Box","color","concat","react_default","a","createElement","style","backgroundColor","height","width","Styled","_StyledH","NavLink","styled","withConfig","displayName","componentId","NavigationBar","href","App","component_NavigationBar","borderStyle","borderWidth","display","component_Box","component_Styled","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kNAGMA,eAAU,kBAAMC,KAAKC,MAAsB,IAAhBD,KAAKE,YAMvBC,EALO,WACpB,IAAMC,EAAK,OAAAC,OAAUN,IAAV,KAAAM,OAAuBN,IAAvB,KAAAM,OAAoCN,IAApC,KACX,OAAOO,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,gBAAiBN,EAAOO,OAAQ,IAAKC,MAAO,4GCFnE,IAEeC,EAFA,kBAAMP,EAAAC,EAAAC,cAAAM,EAAA,iDCAfC,EAAUC,IAAOT,EAAVU,WAAA,CAAAC,YAAA,yBAAAC,YAAA,gBAAGH,CAAH,qBAaEI,EAViB,WAC9B,OACEd,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACO,EAAD,CAASM,KAAK,KAAd,eACAf,EAAAC,EAAAC,cAACO,EAAD,CAASM,KAAK,2CAAd,UACAf,EAAAC,EAAAC,cAACO,EAAD,CAASM,KAAK,sCAAd,aCiBSC,EAvBO,WACpB,OACEhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAAA,OACEC,MAAO,CACLe,YAAa,QACbC,YAAa,EACbC,QAAS,OACTf,OAAQ,MAGVL,EAAAC,EAAAC,cAACmB,EAAD,MACArB,EAAAC,EAAAC,cAACmB,EAAD,MACArB,EAAAC,EAAAC,cAACmB,EAAD,MACArB,EAAAC,EAAAC,cAACmB,EAAD,MACArB,EAAAC,EAAAC,cAACmB,EAAD,MACArB,EAAAC,EAAAC,cAACoB,EAAD,SCXYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.bc34f77a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport 'styled-components/macro';\r\n\r\nconst rand256 = () => Math.floor(Math.random() * 256);\r\nconst Box: React.FC = () => {\r\n  const color = `rgb(${rand256()},${rand256()},${rand256()})`;\r\n  return <div style={{ backgroundColor: color, height: 200, width: 200 }} />;\r\n};\r\n\r\nexport default Box;\r\n","import React from \"react\";\r\nimport \"styled-components/macro\";\r\nimport * as types from \"styled-components/cssprop\";\r\n\r\nconst Styled = () => <h1 css=\"color: papayawhip\">Hello css prop</h1>;\r\n\r\nexport default Styled;\r\n","import React from \"react\";\r\nimport \"styled-components/macro\";\r\nimport * as types from \"styled-components/cssprop\";\r\nimport styled from \"styled-components/macro\";\r\nconst NavLink = styled.a`\r\n  padding: 0 10px;\r\n`;\r\nconst NavigationBar: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <NavLink href=\"/\">React drill</NavLink>\r\n      <NavLink href=\"https://github.com/nikeeshi/react-drill\">Github</NavLink>\r\n      <NavLink href=\"http://nikeeshipro.hatenablog.com/\">My blog</NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavigationBar;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Box from \"./component/Box\";\nimport Styled from \"./component/Styled\";\nimport NavigationBar from \"./component/NavigationBar\";\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      <NavigationBar/>\n      <div\n        style={{\n          borderStyle: \"solid\",\n          borderWidth: 1,\n          display: \"flex\",\n          height: 300\n        }}\n      >\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Styled />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}