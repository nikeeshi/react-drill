{"version":3,"sources":["root/level1Root sync /.(t|j)sx?$","root/level1Root/Hoge.tsx","root/level1Root/Sample.tsx","root/pageLoader.ts","component/SideNav.tsx","root/Root.tsx","grid/GridBox.tsx","component/App.tsx","serviceWorker.ts","index.tsx"],"names":["map","./Hoge.tsx","./Sample.tsx","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","a","createElement","pagesContext","require","pathFromFileName","pageName","replace","toLowerCase","pages","page","name","path","filePath","component","default","SideNavContainer","styled","div","withConfig","displayName","componentId","NavLink","ReactRouterLink","Link","SideNav","react_default","to","key","href","Root","FlexBoxContainer","_templateObject","Child","props","concat","base","Row","_ref","children","className","React","Children","child","isValidElement","type","Box","GridBox_Box","_ref2","_ref2$base","App","react_router_dom","GridBox_Row","component_SideNav","react_router","exact","Boolean","window","location","hostname","match","ReactDOM","render","component_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAA,IAAAA,EAAA,CACAC,aAAA,GACAC,eAAA,IAIA,SAAAC,EAAAC,GACA,IAAAC,EAAAC,EAAAF,GACA,OAAAG,EAAAF,GAEA,SAAAC,EAAAF,GACA,IAAAG,EAAAC,EAAAR,EAAAI,GAAA,CACA,IAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,KAEA,MADAK,EAAAE,KAAA,mBACAF,EAEA,OAAAT,EAAAI,GAEAD,EAAAS,KAAA,WACA,OAAAC,OAAAD,KAAAZ,IAEAG,EAAAW,QAAAR,EACAS,EAAAC,QAAAb,EACAA,EAAAE,GAAA,oCCvBAE,EAAAU,EAAAC,GAAA,IAAAC,EAAAZ,EAAA,GAAAa,EAAAb,EAAAc,EAAAF,GACeD,EAAA,0BAAME,EAAAE,EAAAC,cAAA,qDCDrBhB,EAAAU,EAAAC,GAAA,IAAAC,EAAAZ,EAAA,GAAAa,EAAAb,EAAAc,EAAAF,GAEeD,EAAA,mBACb,OAAOE,EAAAE,EAAAC,cAAA,qJCHHC,EAAeC,MAIfC,EAAmB,SAACC,GACxB,OAAOA,EAASC,QAAQ,sBAAuB,QAAQC,eAE5CC,EAAQN,EAClBZ,OACAZ,IAAI,SAAA+B,GAAI,MAAK,CACZC,MATsBL,EASCI,EARlBJ,EAASC,QAAQ,sBAAuB,OAS7CK,KAAMP,EAAiBK,GACvBG,SAAUH,EACVI,UAAWX,EAAaO,GAAMK,SAZT,IAACT,ICKpBU,EAAmBC,IAAOC,IAAVC,WAAA,CAAAC,YAAA,4BAAAC,YAAA,eAAGJ,CAAH,uCAIhBK,EAAUL,IAAOhB,EAAVkB,WAAA,CAAAC,YAAA,mBAAAC,YAAA,eAAGJ,CAAH,0EAOPM,EAAkBN,YAAOO,KAAVL,WAAA,CAAAC,YAAA,2BAAAC,YAAA,eAAGJ,CAAH,wFA8BNQ,EAtBW,WACxB,OACEC,EAAAzB,EAAAC,cAACc,EAAD,KACEU,EAAAzB,EAAAC,cAAA,WACEwB,EAAAzB,EAAAC,cAACqB,EAAD,CAAiBI,GAAG,KAApB,gBAEDlB,EAAM9B,IAAI,SAAA+B,GAAI,OACbgB,EAAAzB,EAAAC,cAAA,OAAK0B,IAAKlB,EAAKC,MACbe,EAAAzB,EAAAC,cAACqB,EAAD,CAAiBI,GAAIjB,EAAKE,MAAOF,EAAKC,SAG1Ce,EAAAzB,EAAAC,cAAA,WACAwB,EAAAzB,EAAAC,cAAA,WACEwB,EAAAzB,EAAAC,cAACoB,EAAD,CAASO,KAAK,2CAAd,WAEFH,EAAAzB,EAAAC,cAAA,WACEwB,EAAAzB,EAAAC,cAACoB,EAAD,CAASO,KAAK,sCAAd,cCxCKC,EAAO,WAClB,OAAOJ,EAAAzB,EAAAC,cAAA,yJCCT,IAAM6B,EAAmBd,IAAOC,IAAVc,KAOhBC,EAAQhB,IAAOC,IAAI,SAACgB,GAAD,cAAAC,OAA+BD,EAAME,QAIjDC,EAA+C,SAAAC,GAGtD,IAFJC,EAEID,EAFJC,SACAC,EACIF,EADJE,UAEA,OACEd,EAAAzB,EAAAC,cAAC6B,EAAD,CAAkBS,UAAWA,GAC1BC,IAAMC,SAAS/D,IAAI4D,EAAU,SAAAI,GAC5B,OAAIF,IAAMG,eAAeD,IAAUA,EAAME,OAASC,EACzCH,EAEAjB,EAAAzB,EAAAC,cAAC6C,EAAD,KAAMJ,OASVG,EAAyC,SAAAE,GAGhD,IAFJT,EAEIS,EAFJT,SAEIU,EAAAD,EADJZ,YACI,IAAAa,EADG,EACHA,EACJ,OAAOvB,EAAAzB,EAAAC,cAAC+B,EAAD,CAAOG,KAAMA,GAAOG,ICXdW,EApBO,WACpB,OACExB,EAAAzB,EAAAC,cAACiD,EAAA,EAAD,KACEzB,EAAAzB,EAAAC,cAACkD,EAAD,KACE1B,EAAAzB,EAAAC,cAACmD,EAAD,MACA3B,EAAAzB,EAAAC,cAAC6C,EAAD,CAAKX,KAAM,GACR3B,EAAM9B,IAAI,SAAA+B,GAAI,OACbgB,EAAAzB,EAAAC,cAACoD,EAAA,EAAD,CACE1B,IAAKlB,EAAKC,KACVC,KAAMF,EAAKE,KACXE,UAAWJ,EAAKI,cAGpBY,EAAAzB,EAAAC,cAACoD,EAAA,EAAD,CAAO1C,KAAK,IAAI2C,OAAK,EAACzC,UAAWgB,QCPvB0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAzB,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.de7fdfda.chunk.js","sourcesContent":["var map = {\n\t\"./Hoge.tsx\": 32,\n\t\"./Sample.tsx\": 33\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 31;","import React from \"react\";\r\nexport default () => <div>Hoge</div>;\r\n","import React from \"react\";\r\nimport { ShapeMarginProperty } from \"csstype\";\r\nexport default function() {\r\n  return <div>This is the sample page!!!</div>;\r\n};\r\n","const pagesContext = require.context(\"./level1Root/\", true, /\\.(t|j)sx?$/);\r\nconst nameFromFileName = (pageName: string) => {\r\n  return pageName.replace(/\\.\\/(\\w*)\\.(t|j)sx?/, \"$1\");\r\n};\r\nconst pathFromFileName = (pageName: string) => {\r\n  return pageName.replace(/\\.\\/(\\w*)\\.(t|j)sx?/, \"/$1/\").toLowerCase();\r\n};\r\nexport const pages = pagesContext\r\n  .keys()\r\n  .map(page => ({\r\n    name: nameFromFileName(page),\r\n    path: pathFromFileName(page),\r\n    filePath: page,\r\n    component: pagesContext(page).default\r\n  }));\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"styled-components/macro\";\r\nimport styled from \"styled-components/macro\";\r\nimport { Row } from \"../grid/GridBox\";\r\nimport { pages } from \"../root/pageLoader\";\r\nconst SideNavContainer = styled.div`\r\n  background: darkblue;\r\n  height: 100vh;\r\n`;\r\nconst NavLink = styled.a`\r\n  padding: 0 10px;\r\n  color: white;\r\n  :hover {\r\n    text-decoration: underline dashed;\r\n  }\r\n`;\r\nconst ReactRouterLink = styled(Link)`\r\n  padding: 0 10px;\r\n  color: white;\r\n  text-decoration: none;\r\n  :hover {\r\n    text-decoration: underline;\r\n  }\r\n`;\r\nconst SideNav: React.FC = () => {\r\n  return (\r\n    <SideNavContainer>\r\n      <div>\r\n        <ReactRouterLink to=\"/\">React drill</ReactRouterLink>\r\n      </div>\r\n      {pages.map(page => (\r\n        <div key={page.name}>\r\n          <ReactRouterLink to={page.path}>{page.name}</ReactRouterLink>\r\n        </div>\r\n      ))}\r\n      <br />\r\n      <div>\r\n        <NavLink href=\"https://github.com/nikeeshi/react-drill\">Github</NavLink>\r\n      </div>\r\n      <div>\r\n        <NavLink href=\"http://nikeeshipro.hatenablog.com/\">My blog</NavLink>\r\n      </div>\r\n    </SideNavContainer>\r\n  );\r\n};\r\n\r\nexport default SideNav;\r\n","import React from \"react\";\r\nexport const Root = () => {\r\n  return <div>This is the root page!!!</div>;\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst FlexBoxContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n`;\r\ninterface ChildProps {\r\n  base: number;\r\n}\r\nconst Child = styled.div((props: ChildProps) => `flex:${props.base}`);\r\ninterface ContainerProps {\r\n  className?: string;\r\n}\r\nexport const Row: React.FunctionComponent<ContainerProps> = ({\r\n  children,\r\n  className\r\n}) => {\r\n  return (\r\n    <FlexBoxContainer className={className}>\r\n      {React.Children.map(children, child => {\r\n        if (React.isValidElement(child) && child.type === Box) {\r\n          return child;\r\n        } else {\r\n          return <Box>{child}</Box>;\r\n        }\r\n      })}\r\n    </FlexBoxContainer>\r\n  );\r\n};\r\ninterface BoxProps {\r\n  base?: number;\r\n}\r\nexport const Box: React.FunctionComponent<BoxProps> = ({\r\n  children,\r\n  base = 1\r\n}) => {\r\n  return <Child base={base}>{children}</Child>;\r\n};\r\n","import React from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport SideNav from \"./SideNav\";\nimport { Root } from \"../root/Root\";\nimport { pages } from \"../root/pageLoader\";\nimport { Row, Box } from \"../grid/GridBox\";\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <Row>\n        <SideNav />\n        <Box base={3}>\n          {pages.map(page => (\n            <Route\n              key={page.name}\n              path={page.path}\n              component={page.component}\n            />\n          ))}\n          <Route path=\"/\" exact component={Root} />\n        </Box>\n      </Row>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}